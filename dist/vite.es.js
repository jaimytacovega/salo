import { promises as w } from "fs";
import { join as S } from "path";
const y = async ({ path: s }) => {
  let t = [];
  try {
    const r = await w.readdir(s);
    for (const c of r) {
      const d = S(s, c);
      if ((await w.stat(d)).isDirectory()) {
        const a = await y({ path: d });
        t = t.concat(a);
      } else
        t.push(d);
    }
  } catch (r) {
    console.error("Error reading directory:", r);
  }
  return t;
}, j = async ({ code: s, filePath: t }) => {
  try {
    await w.writeFile(t, s), console.info(`File '${t}' has been created`);
  } catch (r) {
    console.error("Error writing file:", r);
  }
}, x = ({ source: s }) => y({ path: `src/${s}/` }), D = async ({ sources: s }) => {
  var r;
  let t = 0;
  return Promise.all(
    (r = s ?? []) == null ? void 0 : r.map(async (c, d) => {
      var n;
      const l = await x({ source: c }), a = (n = l == null ? void 0 : l.map((e, o) => {
        var u;
        if (!(e != null && e.includes("/actions/")) || !(e != null && e.endsWith(".js"))) return "";
        t++;
        const i = (u = e == null ? void 0 : e.replace(`src/${c}`, `@/${c}`)) == null ? void 0 : u.replace(".js", "");
        return `import * as A${t} from '${i}'
console.log(A${t})
`;
      })) == null ? void 0 : n.join("");
      return { filePaths: l, code: a };
    })
  );
}, $ = ({ path: s }) => new URL(`${s}`, import.meta.url).pathname, _ = async ({ sources: s }) => {
  var t;
  try {
    const r = await D({ sources: s }), c = `${(t = r == null ? void 0 : r.map((a) => a == null ? void 0 : a.code)) == null ? void 0 : t.join(`
`)}`, d = "src/_actions_autogenerated.js";
    return await j({ code: c, filePath: d }), {
      ...r == null ? void 0 : r.reduce((a, n) => {
        var e;
        return a = {
          ...a,
          ...(e = n == null ? void 0 : n.filePaths) == null ? void 0 : e.reduce((o, i) => {
            var g;
            if (i != null && i.endsWith(".js") && !(i != null && i.includes("/actions/"))) return o;
            const u = (g = i == null ? void 0 : i.split("/")) == null ? void 0 : g.pop(), f = u == null ? void 0 : u.replace(/\.[^.]+$/, "");
            return o[f] = $({ path: i }), o;
          }, {})
        }, a;
      }, {}),
      actionsFilePath: $({ path: d })
      // 'sw.worker': getURLPath({ path: '/src/sw.worker.js' }),
    };
  } catch (r) {
    return console.error(r), {};
  }
}, b = async () => {
  const s = await y({ path: "dist/" }), t = s == null ? void 0 : s.filter((r) => !(r != null && r.endsWith(".DS_Store")));
  await j({ code: JSON.stringify(t), filePath: "dist/dist.json" });
}, A = () => [
  {
    name: "postbuild-command",
    closeBundle: b
  }
];
export {
  _ as getInputPaths,
  A as getPlugin
};
